[[plugins]]
repo = 'tpope/vim-pathogen'
hook_source = 'execute pathogen#infect()'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
source ~/.config/nvim/plugins/quickrun.vim
'''

[[plugins]]
repo = 'thinca/vim-themis'

[[plugins]]
repo = 'miyakogi/Seiya.vim'

[[plugins]]
repo = 'Lokaltog/vim-powerline'

#[[plugins]]
#repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'simeji/winresizer'

#[[plugins]]
#repo = 'scrooloose/nerdtree'

#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
#rev = 'next'
#build = 'bash install.sh'
#depends = ['deoplete.nvim']
#hook_add = '''
#source ~/.config/nvim/plugins/LanguageClient-neovim.rc.vim
#'''

[[plugins]]
repo='prabirshrestha/async.vim'

[[plugins]]
repo='prabirshrestha/vim-lsp'
hook_add='''
if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd-9']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif
let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}
let g:lsp_log_verbose = 1  " デバッグ用ログを出力
let g:lsp_log_file = expand('~/.cache/tmp/vim-lsp.log')  " ログ出力のPATHを設定
autocmd FileType * setlocal omnifunc=lsp#complete
let g:asyncomplete_completion_delay=1
'''

[[plugins]]
repo='prabirshrestha/asyncomplete.vim'

[[plugins]]
repo='prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
hook_add='''
call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
    \ 'name': 'neosnippet',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
    \ }))
'''
depends='neosnippet.vim'

#[[plugins]]
#repo='thomasfaingnaert/vim-lsp-snippets'
#
#[[plugins]]
#repo='thomasfaingnaert/vim-lsp-neosnippet'
#depends = ['neosnippet.vim', 'vim-lsp-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = 'neosnippet-snippets'
hook_source='''
  " <TAB>: completion.
  inoremap <expr> <S-TAB> pumvisible() ? '<C-p>' : '<S-TAB>'

  " Plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)

  " SuperTab like snippets behavior.
  imap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '<C-n>' : '<TAB>'
  smap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : '<TAB>'

let g:neosnippet#snippets_directory='~/.config/nvim/snippets/'
'''


[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
let g:lsp_settings = {
    \'clangd':{'cmd': ['clangd-9']}
\}
'''
#[[plugins]]
#repo = 'lighttiger2505/deoplete-vim-lsp'
#depends = 'deoplete.nvim'

#[[plugins]]
#repo = 'neoclide/coc.nvim'
#rev = 'release'
#hook_add = '''
#source ~/.config/nvim/plugins/coc.vim
#'''

[[plugins]]
repo = 'vim-syntastic/syntastic'
hook_add = '''
source ~/.config/nvim/plugins/syntastic.vim
 '''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
source ~/.config/nvim/plugins/fzfvim.vim
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
source ~/.config/nvim/plugins/rainbow.vim
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0
'''

[[plugins]]
#repo = 'kannokanno/previm'
repo = 'sebwink/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'iberianpig/ranger-explorer.vim'
hook_add = '''
nnoremap <Space>n :RangerOpenCurrentDir<CR>
'''

[[plugins]]
repo = 'rbgrouleff/bclose.vim'

[[plugins]]
repo = 'glacambre/firenvim'
hook_post_update = '''
  call firenvim#install(0)
'''
